---
title: "Miguel, ERGOSTATS y la Toma de Decisiones con Python"
format: html
editor: visual
toc: true
toc-depth: 3
execute: 
  error: true
---

## La Historia de Miguel

-   **Contexto** üåç: Miguel, un apasionado miembro de ERGOSTATS üìä, est√° al frente de un gran desaf√≠o en su f√°brica de cerveza artesanal üçª.
-   **Desaf√≠o** ü§î: ¬øDeber√≠a invertir en nueva maquinaria üè≠? La decisi√≥n se basar√° en el an√°lisis de datos y series de tiempo ‚è≥.
-   **Giro** üîÑ: Los datos est√°n en GitHub üåê, cortes√≠a de Alex, gur√∫ de R üßô‚Äç‚ôÇÔ∏è. ¬°Pero Miguel est√° listo para explorar Python üêç y llevar su an√°lisis al siguiente nivel!

## Los datos disponibles

### Compras, ventas e impuestos por sector de actividad

| Variable                               | Tipo                                | Descripci√≥n                                                                                       | Etiqueta                                    |
|-----------------|-----------------|----------------------|-----------------|
| `anio_fiscal`                          | Num√©rico (Entero)                   | A√±o fiscal al que corresponden los datos.                                                         | A√±o Fiscal                                  |
| `mes_fiscal`                           | Num√©rico (Entero)                   | Mes fiscal al que corresponden los datos.                                                         | Mes Fiscal                                  |
| `tipo_contribuyente`                   | Categ√≥rico (Texto)                  | Tipo de contribuyente, en este caso, siempre es "SOCIEDADES".                                     | Tipo de Contribuyente                       |
| `actividad_economica`                  | Categ√≥rico (Texto - CIIU 5 d√≠gitos) | Clasificaci√≥n de la actividad econ√≥mica seg√∫n el C√≥digo Internacional Industrial Uniforme (CIIU). | Actividad Econ√≥mica (CIIU)                  |
| `impuesto_causado_601`                 | Num√©rico (Decimal)                  | Monto del impuesto causado por la empresa, etiquetado como 601.                                   | Impuesto Causado (601)                      |
| `imp_a_pagar_por_percepcion_699`       | Num√©rico (Decimal)                  | Impuesto a pagar calculado en base a percepciones, etiquetado como 699.                           | Impuesto a Pagar por Percepci√≥n (699)       |
| `imp_a_pagar_por_retencion_799`        | Num√©rico (Decimal)                  | Impuesto a pagar calculado en base a retenciones, etiquetado como 799.                            | Impuesto a Pagar por Retenci√≥n (799)        |
| `total_compras_locales_e_importac_519` | Num√©rico (Decimal)                  | Total de compras locales e importaciones realizadas por la empresa, etiquetado como 519.          | Total Compras Locales e Importaciones (519) |
| `total_ventas_y_exportaciones_419`     | Num√©rico (Decimal)                  | Total de ventas y exportaciones realizadas por la empresa, etiquetado como 419.                   | Total Ventas y Exportaciones (419)          |

> **Archivo:** "data/ts_series_iva.csv"

## Los datos disponibles

### Empresas activas que operan en Pichincha

| Variable      | Tipo               | Descripci√≥n                                                                                            | Etiqueta                         |
|----------------|----------------|------------------------|----------------|
| `fecha`       | Fecha (`<date>`)   | Fecha correspondiente a los datos recogidos.                                                           | Fecha                            |
| `nuevas`      | Num√©rico (Entero)  | N√∫mero de empresas que iniciaron actividades en la fecha indicada.                                     | Empresas Nuevas                  |
| `suspendidas` | Num√©rico (Entero)  | N√∫mero de empresas que suspendieron su RUC de manera indefinida en la fecha indicada.                  | Empresas Suspendidas             |
| `reingresos`  | Num√©rico (Entero)  | N√∫mero de empresas que reiniciaron actividades en la fecha indicada.                                   | Reingresos de Empresas           |
| `actividad`   | Categ√≥rico (Texto) | Categor√≠a de actividad econ√≥mica, posiblemente siguiendo la clasificaci√≥n CIIU.                        | Actividad Econ√≥mica              |
| `delta`       | Num√©rico (Entero)  | Diferencia entre el n√∫mero de reingresos y el n√∫mero de empresas suspendidas en la fecha indicada.     | Delta (Reingresos - Suspendidas) |
| `saldo`       | Num√©rico (Entero)  | N√∫mero total de empresas activas calculadas a partir del n√∫mero de empresas activas en enero del 2000. | Saldo de Empresas Activas         |

> **Archivo:** "data/ts_series_pichincha.csv" De estos archivos tenemos una versi√≥n para cuatro actividades:

## Los datos disponibles

### Actividades de elaboraci√≥n de alimentos üìä

Informaci√≥n descargada del sistema Saiku del SRI. Para usar estos datos, es importante filtrar y limpiar la informaci√≥n adecuadamente.

-   **C1050**: ELABORACI√ìN DE PRODUCTOS L√ÅCTEOS ü•õ
    -   ¬°Vamos desde la vaca üêÑ hasta el consumidor! Esta actividad cubre todo lo relacionado con la transformaci√≥n de la leche en productos como queso, yogurt y otros derivados l√°cteos.
-   **C1071**: ELABORACI√ìN DE PRODUCTOS DE PANADER√çA üçû
    -   ¬°Horneamos felicidad! Aqu√≠ entramos al delicioso mundo de los panes, pasteles üç∞, galletas üç™ y todo tipo de productos de panader√≠a.
-   **C1103**: ELABORACI√ìN DE BEBIDAS MALTEADAS Y DE MALTA üç∫
    -   De la cebada al bar, cubrimos la producci√≥n de cervezas artesanales y otras bebidas fermentadas a partir de malta. ¬°Salud!

Informaci√≥n descargada del sistema Saiku del SRI.

> Recuerda, antes de sumergirnos en los datos, necesitamos ponernos nuestros delantales de limpieza de datos üßºüßπ para asegurarnos de que todo est√© en orden para el an√°lisis.

#### La Conexi√≥n entre ERGOSTATS, R y Python (10 minutos)

![](https://miro.medium.com/v2/resize:fit:1400/1*MtcjS1OsupH0uzK-V7aBbg.png)

-   **RStudio IDE:** Una casa unificada para R y Python.
-   **Reticulate Magic:** La magia detr√°s de la uni√≥n es `reticulate`, el paquete de R que teje Python en tu flujo de trabajo de R. üêç‚ú®
-   **An√°lisis Sin Fronteras:** Pasa datos entre R y Python con facilidad, ejecuta c√≥digo Python en R Markdown y m√°s. üìäüîÑ
-   **Integraci√≥n de R y Python:** Demostrar la eficiencia de usar `pins` en R para compartir datos y c√≥mo estos pueden ser f√°cilmente accesibles desde Python.

> Para ello nos vamos a **Tools \> Global Options \> Python**

![](images/setup.png)

#### Preparaci√≥n para el An√°lisis con Python (15 minutos)

-   **Instalaci√≥n de Librer√≠as en Python:** Mostrar a los asistentes c√≥mo instalar `pandas` y `requests`.
-   **Acceso a Datos de GitHub:** Guiar a los asistentes a trav√©s del proceso de descargar los datos del repositorio de GitHub a Python.

```{=html}
<!-- -->
```
-   **Instrucciones:**

Abre la terminal o l√≠nea de comandos en tu computadora y escribe el siguiente comando:

```         
python -m pip install pandas numpy seaborn pyreadstat statsmodels prophet janitor
```

¬øPara que instalamos estos m√≥dulos?

-   **Pandas y Numpy:** Para manejar y operar con datos.
-   **Seaborn:** Para visualizaciones de datos.
-   **Pyreadstat:** Para leer archivos en formato SPSS.
-   **Statsmodels y Prophet:** Para modelar series de tiempo.

Ahora vamos a cargar los m√≥dulos instalados:

```{python}

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from prophet import Prophet
import pyreadstat
from janitor import clean_names
from pmdarima import auto_arima
import datetime
```

Ahora leemos nuestros archivos:

```{python}
# Empresas activas en Pichincha:
ts_series_pichincha = pd.read_csv("data/ts_series_pichincha.csv")
# Datos y series del IVA:
ts_series_iva = pd.read_csv("data/ts_series_iva.csv")
# Lacteos:
ts_series_actividad_C1050 = pd.read_csv("data/ts_series_actividad_C1050.csv")
# Panader√≠a:
ts_series_actividad_C1071 = pd.read_csv("data/ts_series_actividad_C1071.csv")
# Bebidas malteadas y de malta:
ts_series_actividad_C1103 = pd.read_csv("data/ts_series_actividad_C1103.csv")
```

Ver la serie de tiempo:

```{python}
import matplotlib.pyplot as plt

def graficar_serie_tiempo(df, columna, titulo, etiqueta_x, etiqueta_y):
    # Aseg√∫rate de que la columna de fecha est√© en formato datetime
    df['fecha'] = pd.to_datetime(df['fecha'])
    
    # Establece la fecha como el √≠ndice del DataFrame
    df = df.set_index('fecha')
    
    # Crea el gr√°fico
    plt.figure(figsize=(10, 6))
    plt.plot(df[columna])
    
    # A√±ade t√≠tulos y etiquetas
    plt.title(titulo)
    plt.xlabel(etiqueta_x)
    plt.ylabel(etiqueta_y)
    
    # Muestra el gr√°fico
    plt.show()

# Usa la funci√≥n para graficar la columna 'nuevas' del DataFrame 'ts_series_actividad_C1103'
graficar_serie_tiempo(ts_series_pichincha, 'saldo', 'Empresas activas', 'Fecha', 'Empresas')
```

```{python}

ts_series_iva.columns

elaboracion_malta = ts_series_iva[(ts_series_iva['actividad_economica'] == "C1103")]

elaboracion_malta["anio_fiscal"] = elaboracion_malta["anio_fiscal"].astype(str)

elaboracion_malta["mes_fiscal"] = elaboracion_malta["mes_fiscal"].astype(str)

elaboracion_malta['dia'] = 1

elaboracion_malta['dia'] = elaboracion_malta['dia'].astype(str)

elaboracion_malta['fecha_str'] = elaboracion_malta['anio_fiscal'] + '-' + elaboracion_malta['mes_fiscal'] + '-' + elaboracion_malta['dia']

elaboracion_malta["fecha"] = pd.to_datetime(elaboracion_malta[['anio_fiscal', 'mes_fiscal','dia']])

graficar_serie_tiempo(elaboracion_malta,'total_ventas_y_exportaciones_419',"Ventas de la elboraci√≥n de bebidas de malta","Fecha","D√≥lares")
```


Pero algo no cuadra, mejor veamos el lag:

```{python}
def crear_variable_lag(df, columna, lag):
    # Crea una nueva columna que es el valor actual de 'columna' menos su valor 'lag' per√≠odos atr√°s
    df[f'{columna}_menos_{lag}'] = df[columna] - df[columna].shift(lag)
    return df

# Usa la funci√≥n para crear una nueva columna que es 'nuevas' menos su valor 1 per√≠odo atr√°s
ts_series_pichincha = crear_variable_lag(ts_series_pichincha, 'saldo', 1)

graficar_serie_tiempo(ts_series_pichincha, 'saldo_menos_1', 'Cambio en el n√∫emro de empresas', 'Fecha', 'Empresas')
```
Esa serie se ve sospechoza.


#### Exploraci√≥n y Limpieza de Datos (20 minutos)

-   **Inspecci√≥n de los Datos:** Utilizar `pandas` para cargar y revisar los datos.

```{python}
def eliminar_valores_faltantes(df, columna):
    # Elimina los valores faltantes en la columna especificada
    df = df.dropna(subset=[columna])
    return df

ts_series_pichincha = eliminar_valores_faltantes(ts_series_pichincha, 'saldo_menos_1')
  
```

-   **Limpieza y Preparaci√≥n:** Ense√±ar t√©cnicas b√°sicas de limpieza y preparaci√≥n de datos para el an√°lisis de series de tiempo.

```{python}
from statsmodels.tsa.seasonal import seasonal_decompose

def descomponer_serie(df, columna, periodo):
    # Llena los valores faltantes con el valor anterior en la serie de tiempo
    df.loc[:, columna] = df.loc[:, columna].fillna(method='ffill')
    
    # Descompone la serie de tiempo en sus componentes
    descomposicion = seasonal_decompose(df[columna], period=periodo)
    
    # Crea nuevas columnas con los componentes de la descomposici√≥n
    df.loc[:, f'{columna}_tendencia'] = descomposicion.trend
    df.loc[:, f'{columna}_estacionalidad'] = descomposicion.seasonal
    df.loc[:, f'{columna}_residuo'] = descomposicion.resid
    
    return df
  


ts_series_pichincha = ts_series_pichincha.to_datetime(ts_series_pichincha["fecha"])  

ts_series_pichincha.set_index("fecha", inplace = True)

ts_series_pichincha.resample("M")["saldo"].sum()

ts_series_pichincha = crear_variable_lag(ts_series_pichincha, 'saldo', 1)

ts_series_pichincha = eliminar_valores_faltantes(ts_series_pichincha, 'saldo_menos_1')

# Usa la funci√≥n para descomponer la columna 'saldo_menos_1'
# Aseg√∫rate de especificar el periodo correcto para tus datos
ts_series_pichincha = descomponer_serie(ts_series_pichincha, 'saldo_menos_1', periodo=12)

ts_series_pichincha = ts_series_pichincha.reset_index()

ts_series_pichincha


graficar_serie_tiempo(ts_series_pichincha, 'saldo_menos_1_estacionalidad', 'Residuos de la serie', 'Fecha', 'Residuo')

```


#### An√°lisis de Series de Tiempo en Python (30 minutos)

-   **Teor√≠a de Series de Tiempo:** Breve explicaci√≥n te√≥rica.
-   **Manos a la Obra:** Miguel, guiado por el instructor, comienza a analizar las tendencias, estacionalidades y otros patrones en los datos.
-   **Modelado de Pron√≥sticos:** Introducci√≥n a modelos como ARIMA o Prophet en Python.

```{python}
def generar_modelo_arima(df, columna):
    # Aseg√∫rate de que la columna de fecha est√© en formato datetime
    df['fecha'] = pd.to_datetime(df['fecha'])
    
    # Establece la fecha como el √≠ndice del DataFrame
    df = df.set_index('fecha')
    
    # Aseg√∫rate de que tu √≠ndice de fecha tenga una frecuencia asociada
    # 'MS' significa inicio de mes. Ajusta esto seg√∫n tus datos
    df = df.asfreq('MS')
    
     # Elimina las filas con valores NaN
    df = df.dropna()
    
    # Ajusta el modelo ARIMA a los datos
    modelo = auto_arima(df[columna], seasonal=True, m=12)
    
    return modelo

# Usa la funci√≥n para generar un modelo para la columna 'nuevas'
modelo = generar_modelo_arima(ts_series_pichincha, 'saldo')

# Imprime los detalles del modelo seleccionado
print(modelo.summary())
```

Sacamos las predicciones:

```{python}
n_periodos = 12

# Genera predicciones
predicciones = modelo.predict(n_periods=n_periodos)

print(predicciones)

# Genera un √≠ndice de fecha para las predicciones
indice_fechas = pd.date_range(start=predicciones.index[-1], periods=n_periodos, freq='MS')

# Crea un DataFrame para las predicciones
df_predicciones = pd.DataFrame(data=predicciones, index=indice_fechas, columns=['prediccion'])

print(df_predicciones)
```


#### Toma de Decisiones Basada en Datos (20 minutos)

-   **Calculando el Valor Presente Neto (VPN):** Paso a paso, Miguel calcula el VPN para diferentes escenarios de inversi√≥n.
-   **Visualizaci√≥n de Resultados:** Miguel utiliza gr√°ficas para visualizar los resultados y facilitar la toma de decisiones.
-   **Evaluaci√≥n de Escenarios:** Miguel examina las implicaciones de cada escenario de inversi√≥n (1 a√±o, 2 a√±os, 5 a√±os).

#### Sesi√≥n Interactiva y Preguntas (5 minutos)

-   **Interacci√≥n con la Audiencia:** Miguel invita a los asistentes a hacer preguntas y compartir sus opiniones sobre el an√°lisis realizado.
-   **Consejos Pr√°cticos:** Miguel comparte sus aprendizajes sobre la transici√≥n de R a Python y la importancia del an√°lisis de datos en la toma de decisiones empresariales.

#### Conclusiones y Reflexiones Finales (5 minutos)

-   **Lecciones Aprendidas:** Miguel resume las lecciones clave sobre el an√°lisis de series de tiempo y su impacto en las decisiones empresariales.
-   **Inspiraci√≥n para la Comunidad ERGOSTATS:** Miguel anima a los miembros de ERGOSTATS a aprovechar la colaboraci√≥n interdisciplinaria y a explorar nuevos horizontes en el an√°lisis de datos.
